一、AnnotationConfigApplicationContext初始化工程
1. ApplicationContext构造函数
    1)初始化Annotation和ClassPath BeanDefinition Reader,用于从注解和XML文件中读取Bean Definition
    2)在GenericApplicationContext构造函数中，创建BeanFactory（DefaultListableBeanFactory）实例
2. 注册Component Class，包括注解为Configuration的Config Class。特别注意，在构造函数中，可以传入多个Component Class
	1)解析注解Bean各种属性
	2)使用Registry接口，注册到BeanFactory中。（GenericApplicationContext实现了BeanDefinitionRegistry接口，同时它包含了BeanFactory实例）
３. 验证环境变量，早期的监听器和事件 - prepareRefresh
４. 准备BeanFactory (prepareBeanFactory)
	１)设置ClassLoader等
	2)添加ApplicationContextAwareProcessor，ApplicationListenerDetector等后置处理器
	３)注册Enviroment等到BeanFactory
５. 执行postProcessBeanFactory方法，如该ApplicationContext子类的重载了该方法
６. 调用BeanFactory的后置处理器(invokeBeanFactoryPostProcessors)
    １）按照优先级顺序调用BeanDefinitionRegistryPostProcessor的后置处理方法（BeanDefinitionRegistryPostProcessor完成更多的BeanDefinition注册）
    ２）按照优先级顺序调用BeanFactoryPostProcessor的后置处理方法
    注：会有两类BeanFactoryPostProcessor
    　　a)一类是显式调用AbstractApplicationContext的addBeanFactoryPostProcessor把BeanFactoryPostProcessor加入到beanFactoryPostProcessors中。
         实际上猜不出是在哪里调用addBeanFactoryPostProcessor的，Spring内部没有任何一个地方调用这个函数。外部代码调用没有合适的地方。
       b)另一类式把BeanFactoryPostProcessor作为Bean，然后遍历BeanDefinition获取BeanFactoryPostProcessor
７. 注册BeanProcessor（注意区分BeanFactory和Bean的后置处理器及其作用，registerBeanPostProcessors）
    １）统计BeanProcessor的数量，注意BeanProcessor来自三处。
        a)来自BeanFactory的beanPostProcessors，这些是已经在在４.2中实例化的，并加入beanPostProcessors的。
        b)来自BeanFactory的beanDefinitionNames，这些还只是解析出来BeanDefinition，还没有实例化。
        c)还有一个是立即马上紧接着要实例化的BeanPostProcessorChecker，并加入beanPostProcessors的。
    ２）对还是处于Bean Baby状态的Bean Definition(即７.１.b)按照优先级实例化(使用BeanFactory.getBean，这里可以深入了解怎么实例化Bean的)，优先级分类分为以下4类
    　　 a)PriorityOrdered
        b)Ordered
        c)Regular
        d)Internal
    ３）按照优先级顺序把实例化的postProcessors注册到BeanFactory.beanPostProcessors
８. 初始化MessageSource（initMessageSource）
    创建MessageSource，作为Singleton注册到BeanFactory (实际管理Singleton的是DefaultSingletonBeanRegistry类，这里可以有Design的详解
9. 初始化事件多播器（initApplicationEventMulticaster）
    创建事件多播器，作为Singleton注册到BeanFactory
10. 注册监听器（registerListeners）
    把各类监听器注册到多播器中
11. 完成BeanFactory初始化，并初始化所有剩下的Singleton Bean(finishBeanFactoryInitialization)
    1)冻结所有BeanDefinition的元数据，不再接受更改。会把已有的BeanDefinitionNames拷贝到frozenBeanDefinitionNames
    ２)实例化所有除懒加载的Singletons
        a)把在４.1中设置的ClassLoader Reset为null
        b)遍历mergedBeanDefinitions，非抽象、单例、非懒加载的Bean都要实例化
        c)已经在前面阶段显式实例化的Bean则跳过
        d)其他需要创建的Bean实例的，但并不是只能自动创建
            i)实现了InstantiationAwareBeanPostProcessor接口的，可以在其postProcessBeforeInstantiation完成Bean创建
                注：(AbstractAutowireCapableBeanFactory:resolveBeforeInstantiation
                        @AbstractAutowireCapableBeanFactory:createBean
            ii)在Configuration类中定义的Bean，用其工厂方法初始化(AbstractAutowireCapableBeanFactory:instantiateUsingFactoryMethod），详细过程下面。




!setFactoryBeanName(@Nullable String factoryBeanName)
二、实例化＠Configuration里的Regular Bean
1. 待实例化Bean在＠Configuration中有实例化的工厂方法(mbd.getFactoryMethodName())
２.　获取factoryBean的Class
    1)待实例化Bean有FactoryBeanName(mbd.getFactoryBeanName())，这个FactoryBeanName就是＠Configuraton的Bean Name
    2)由FactoryBeanName获取factoryBean实例，进而由反射获取其Class
    3)


