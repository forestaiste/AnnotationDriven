一、AnnotationConfigApplicationContext初始化工程
1. ApplicationContext构造函数
    1)初始化Annotation和ClassPath BeanDefinition Reader,用于从注解和XML文件中读取Bean Definition
    2)在GenericApplicationContext构造函数中，创建BeanFactory（DefaultListableBeanFactory）实例
2. 注册Component Class，包括注解为Configuration的Config Class。特别注意，在构造函数中，可以传入多个Component Class
	1)解析注解Bean各种属性
	2)使用Registry接口，注册到BeanFactory中。（GenericApplicationContext实现了BeanDefinitionRegistry接口，同时它包含了BeanFactory实例）
3. 验证环境变量，早期的监听器和事件 - prepareRefresh
5. 准备BeanFactory (prepareBeanFactory)
	１)设置ClassLoader等
	2)添加ApplicationContextAwareProcessor，ApplicationListenerDetector等后置处理器
	3)注册Enviroment等到BeanFactory
5. 执行postProcessBeanFactory方法，如该ApplicationContext子类的重载了该方法
6. 调用BeanFactory的后置处理器(invokeBeanFactoryPostProcessors)
    １）按照优先级顺序调用BeanDefinitionRegistryPostProcessor的后置处理方法（BeanDefinitionRegistryPostProcessor完成更多的BeanDefinition注册）
        注：ConfigurationClassPostProcessor实现了BeanDefinitionRegistryPostProcessor，它作为第一个BeanDefinition加入到了BeanFactory，BeanName为org.springframework.context.annotation.internalConfigurationAnnotationProcessor
    ２）按照优先级顺序调用BeanFactoryPostProcessor的后置处理方法
    注：会有两类BeanFactoryPostProcessor
    　　a)一类是显式调用AbstractApplicationContext的addBeanFactoryPostProcessor把BeanFactoryPostProcessor加入到beanFactoryPostProcessors中。
         实际上猜不出是在哪里调用addBeanFactoryPostProcessor的，Spring内部没有任何一个地方调用这个函数。外部代码调用没有合适的地方。
       b)另一类式把BeanFactoryPostProcessor作为Bean，然后遍历BeanDefinition获取BeanFactoryPostProcessor
7. 注册BeanProcessor（注意区分BeanFactory和Bean的后置处理器及其作用，registerBeanPostProcessors）
    1)统计BeanProcessor的数量，注意BeanProcessor来自三处。
        a)来自BeanFactory的beanPostProcessors，这些是已经在在４.2中实例化的，并加入beanPostProcessors的。
        b)来自BeanFactory的beanDefinitionNames，这些还只是解析出来BeanDefinition，还没有实例化。
        c)还有一个是立即马上紧接着要实例化的BeanPostProcessorChecker，并加入beanPostProcessors的。
    2)对还是处于Bean Baby状态的Bean Definition(即７.１.b)按照优先级实例化(使用BeanFactory.getBean，这里可以深入了解怎么实例化Bean的)，优先级分类分为以下4类
    　　 a)PriorityOrdered
        b)Ordered
        c)Regular
        d)Internal
    ３)按照优先级顺序把实例化的postProcessors注册到BeanFactory.beanPostProcessors
8. 初始化MessageSource（initMessageSource）
    创建MessageSource，作为Singleton注册到BeanFactory (实际管理Singleton的是DefaultSingletonBeanRegistry类，这里可以有Design的详解
9. 初始化事件多播器（initApplicationEventMulticaster）
    创建事件多播器，作为Singleton注册到BeanFactory
10. 注册监听器（registerListeners）
    把各类监听器注册到多播器中
11. 完成BeanFactory初始化，并初始化所有剩下的Singleton Bean(finishBeanFactoryInitialization)
    1)冻结所有BeanDefinition的元数据，不再接受更改。会把已有的BeanDefinitionNames拷贝到frozenBeanDefinitionNames
    2)实例化所有除懒加载的Singletons
        a)把在４.1中设置的ClassLoader Reset为null
        b)遍历mergedBeanDefinitions，非抽象、单例、非懒加载的Bean都要实例化
        c)已经在前面阶段显式实例化的Bean则跳过
        d)其他需要创建的Bean实例的，但并不是只能自动创建
            i)实现了InstantiationAwareBeanPostProcessor接口的，可以在其postProcessBeforeInstantiation完成Bean创建
                注：(AbstractAutowireCapableBeanFactory:resolveBeforeInstantiation
                        @AbstractAutowireCapableBeanFactory:createBean
            ii)在Configuration类中定义的Bean，用其工厂方法初始化(AbstractAutowireCapableBeanFactory:instantiateUsingFactoryMethod），详细过程下面。





二、实例化＠Configuration里的Regular Bean(ConstructorResolver.instantiateUsingFactoryMethod)
1. 待实例化Bean在＠Configuration中有实例化的工厂方法(mbd.getFactoryMethodName())
2.　获取factoryBean的Class
    1)待实例化Bean有FactoryBeanName(mbd.getFactoryBeanName())，这个FactoryBeanName就是＠Configuraton的Bean Name
    2)由FactoryBeanName获取factoryBean实例，进而由反射获取其Class
    3)由FactorBean Class进一步由反射获取Method(用户自定义的带Bean注解的实例化函数)
    4)调用Method，创建实例，装到BeanWrapper
    5)调用MergedBeanDefinitionPostProcessor，修改BeanDefinition
    6)以该Bean的BeanName为Key，把获取该Bean的Singleton的工厂(singletonFactory)加入到BeanFactory中。既以后能在调用getBean的时候返回该Bean的工厂方法
    　　注：该工厂方法在返回Bean之前会调用SmartInstantiationAwareBeanPostProcessor
    　　InstantiationAwareBeanPostProcessor
    　　adding a callback for predicting the eventual type of a processed bean.
    7)在Bean实例化之后，并在把其注入到需要该Instance的其他Instance之前，调用InstantiationAwareBeanPostProcessors
        注：InstantiationAwareBeanPostProcessor
        Typically used to suppress default instantiation for specific target beans,
        for example to create proxies with special TargetSources (pooling targets,
        lazily initializing targets, etc), or to implement additional injection strategies
        such as field injection.This interface is a special purpose interface, mainly for
        internal use within the framework.
    8)把BeanDefinition的值populate到Bean Instance(populateBean)
        a)调用AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor实现了InstantiationAwareBeanPostProcessor)
            注：在populateBean中先于AutowiredAnnotationBeanPostProcessor调用的是ConfigurationClassPostProcessor
        b)对Bean的各Field赋值，值来自Bean Definition，在使用Annotation的时候，值来自Feild的@Value或@AutoWired
        c)对@AutoWired注解的Field是在beanFactory.resolveDependency找到对应的Bean并赋值的
        d)完成Bean的初始化，把Bean加入到DefaultSingletonBeanRegistry中HashMap中，用于以后的注入

三、解析Annotation的配置
1. 注册缺省的BeanDefinition到BeanFactory中
   1)org.springframework.context.annotation.internalConfigurationAnnotationProcessor
   2)org.springframework.context.annotation.internalAutowiredAnnotationProcessor
   3)org.springframework.context.event.internalEventListenerProcessor
   4)org.springframework.context.event.internalEventListenerFactory
2. 显式注册注解为Configuration的Config Class，BeanFactory的BeanDefinition增加到了5个(如果只有一个Config Class)
3. 从BeanFactory中的BeanDefinition找到Config Class进行解析(ConfigurationClassParser.doProcessConfigurationClass)
   1)Check Config Class是否有ComponentScan的Annotation，如果有则使用ComponentScanAnnotationParser进行解析
         a)从注解中找到Package Scan的路径
         b)在指定路径下找到所有注解有Component的Class，用这些Class生成ScannedGenericBeanDefinition实例
         c)对生成的BeanDefinition进行后置处理，并加入到BeanFactory中
   2)处理在Config Class上注释了@Import的类
   　　　 a)使用递归方法，收集所有标注了＠Import的Class
         b)遍历所有@Import的Class处理(ConfigurationClassParser.processImports)
            i)实现了ImportSelector的，把列表的内的Class分别处理
            ii)实现了ImportBeanDefinitionRegistrar的
            iii)普通的Class，按照＠Configuration Class处理
   3)把＠Configuration　Class里的所有Bean Method加入ConfigClass中
   4)使用ConfigurationClassBeanDefinitionReader.loadBeanDefinitions对configClasses
         a)@Import Config Class创建AnnotatedGenericBeanDefinition实例，
            i)设置各Attribute(Lazy, Primary, DependsOn, Role, Description)
            ii设置Scope，ProxyMode
            iii)把该BeanDefinition注册到BeanFactory
         b)Config Class中的BeanMethod创建ConfigurationClassBeanDefinition实例(ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForBeanMethod)
            i)Bean Method如是Static Method设置BeanClass或BeanClassName，以及factoryMethodName
            ii)Bean Method如是Regular Method，设置factoryBeanName和factoryMethodName
                注：Bean Method的Factory Bean既是它所在的Config Class
            iii)设置反射Factory Method
            iv)设置该Bean的Attribute，包括(autowire, autowireCandidate, initMethod, destroyMethod, Scope, proxyMode)
            v)把该BeanDefinition注册到BeanFactory
         c)处理ImportedResources和ImportedBeanDefinitionRegistrars
    注：@ComponentScan-@Component和@Import虽然在Spring中，处理上的流程不一样。但在生成BeanDefintion的功能上跟@Configuration具有可比性。它们三者都能在类里使用Bean Method来声明Bean.

四、获取普通单实例Bean(scope: singleton)
１. 根据Class Type获取Bean
    1)查看allBeanNamesByType(Map<Class<?>, String[]> in DefaultListableBeanFactory)，是否已经有了从ClassType到BeanName的对应关系。第一次获取，关系尚未建立(DefaultListableBeanFactory.doGetBeanNamesForType)
    2)遍历所有BeanDefinition的Name, 根据Bean Name在singletonObjects（Map<String, Object>　in DefaultSingletonBeanRegistry)中获取Bean Instance
    3)判断Bean Instance的Class Type是否跟制定的Class Type一致，一致的话把Bean Name保存到allBeanNamesByType。第二次根据Type获取Bean就省去了１.2和１.3的步骤
    4)使用Bean Name获取Bean Instance
2. 根据Bean Name
    1)直接使用1.4，从singletonObjects获取Bean Instance
五、获取普通多实例Bean(scope: prototype)
    1)获取Bean Name步骤和４.1.1，4.1.2，4.1.3一样
    2)因为是prototyp类型，在singletonObjects中不能找到其实例，需要接下来动态创建
    3)走（二、实例化＠Configuration里的Regular Bean)的流程获取实例
六、从FactoryBean中获取Bean
1. 根据Bean Name
    1)从singletonObjects获取Bean Instance，但现在获取的是Bean Factory的实例，而不是需要的Bean本身
    2)使用获得的Bean Factory Instance和其实现的getObject接口方法，创建需要的Bean
    3)对创建的Bean Instance作后置处理
    4)把创建的Bean Instance加入到factoryBeanObjectCache(Map<String, Object> in FactoryBeanRegistrySupport)，第二次获取的时候直接使用Bean Name从Map获取，不需要再创建
２. 根据Factory Bean的Class Type获取
    1)走（四.1.1，四.1.2，四.1.3）获取Factory Bean的Instance的Bean Name
        注：FactoryBean Instance的Bean Name是加了一个前缀“＆”，以区别它将创建的Bean的Bean Name
    2)走1.1-4的步骤获取想要的Bean







    bw.setBeanInstance(instantiate@@instantiateUsingFactoryMethod@ContructorResovler
    exposedObject = initializeBean(beanName, exposedObject, mbd);
    invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);
    !setFactoryBeanName(@Nullable String factoryBeanName)

